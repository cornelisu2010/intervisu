Scatterplot_Matrix(iris)
Scatterplot_Matrix(iris)
Scatterplot_Matrix(iris)
input=list(select=NULL)
length(input$select)
} else {}
source('~/LRZ Sync+Share/Bachelorarbeit/intervisu/R/Scatterplot_Matrix.R')
library("car", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
source('~/LRZ Sync+Share/Bachelorarbeit/intervisu/R/Scatterplot_Matrix.R')
Scatterplot_Matrix(iris)
source('~/LRZ Sync+Share/Bachelorarbeit/intervisu/R/Scatterplot_Matrix.R')
Scatterplot_Matrix(iris)
data=iris
input
input$select=c(1,2)
data2=data[,input$select]
scatterplot(data2[,position(clicks$click1$x,clicks$click1$y,data[,input$select])[1]],
data2[,position(clicks$click1$x,clicks$click1$y,data[,input$select])[2]],boxplots=F,legend.plot=F, reg.line=F,
xlab=paste(names(data2)[position(clicks$click1$x,clicks$click1$y,data[,input$select])[1]]),
ylab=paste(names(data2)[position(clicks$click1$x,clicks$click1$y,data[,input$select])[2]]),pch=c(19,19), groups=!group$group,by.groups=T,grid=F)
Scatterplot_Matrix(iris)
source('~/LRZ Sync+Share/Bachelorarbeit/intervisu/R/Scatterplot_Matrix.R')
Scatterplot_Matrix(iris)
Scatterplot_Matrix(iris)
source('~/LRZ Sync+Share/Bachelorarbeit/intervisu/R/Scatterplot_Matrix.R')
Scatterplot_Matrix(iris)
library(intervisu)
barplot(table(mtcars$gear,mtcars$cyl),xlab = "Anzahl an Zylinder",ylab="Absolute Anzahl",col=heat.colors(3),cex.names =2,cex.axis = 2)
legend(legend = names(table(mtcars$gear)),fill=heat.colors(3),x=0.1,y=1,cex = 1.5,title = "Gänge")
barplot(table(mtcars$cyl),xlab = "Anzahl an Zylinder",ylab="Absolute Anzahl")
par(mar=c(5.1, 4.1, 4.1, 7.1), xpd=TRUE)
barplot(table(mtcars$gear,mtcars$cyl),xlab = "Anzahl an Zylinder",ylab="Absolute Anzahl",col=heat.colors(3),cex.names =2,cex.axis = 2)
legend("topright",inset=c(-0.25,0), legend = names(table(mtcars$gear)),fill=heat.colors(3),title = "Gänge")
par(mar=c(5.1, 4.1, 4.1, 7.1), xpd=TRUE)
barplot(table(mtcars$gear,mtcars$cyl),xlab = "Anzahl an Zylinder",ylab="Absolute Anzahl",col=heat.colors(3))
legend("topright",inset=c(-0.25,0), legend = names(table(mtcars$gear)),fill=heat.colors(3),title = "Gänge")
barplot(table(mtcars$gear,mtcars$cyl),xlab = "Anzahl an Zylinder",ylab="Absolute Anzahl",col=heat.colors(3))
legend("topright",inset=c(-0.25,0), legend = names(table(mtcars$gear)),fill=heat.colors(3),title = "Gänge")
barplot(table(mtcars$gear,mtcars$cyl),xlab = "Anzahl an Zylinder",ylab="Absolute Anzahl",col=heat.colors(3),cex.axis = 1.5,cex.names = 1.2)
barplot(table(mtcars$gear,mtcars$cyl),xlab = "Anzahl an Zylinder",ylab="Absolute Anzahl",col=heat.colors(3),cex.axis = 1.5,cex.names = 1.5)
legend("topright",inset=c(-0.25,0), legend = names(table(mtcars$gear)),fill=heat.colors(3),title = "Gänge")
par(mar=c(5.1, 4.1, 4.1, 8.1), xpd=TRUE)
barplot(table(mtcars$gear,mtcars$cyl),xlab = "Anzahl an Zylinder",ylab="Absolute Anzahl",col=heat.colors(3),cex.axis = 1.5,cex.names = 1.5)
legend("topright",inset=c(-0.25,0), legend = names(table(mtcars$gear)),fill=heat.colors(3),title = "Gänge")
par(mar=c(5.1, 4.1, 4.1, 8.1), xpd=TRUE)
barplot(table(mtcars$gear,mtcars$cyl),xlab = "Anzahl an Zylinder",ylab="Absolute Anzahl",col=heat.colors(3),cex.axis = 1.5,cex.names = 1.5)
legend("topright",inset=c(-0.25,0), legend = names(table(mtcars$gear)),fill=heat.colors(3),title = "Gänge")
par(mar=c(5.1, 4.1, 4.1, 8.1), xpd=TRUE)
barplot(prop.table(table(mtcars$gear,mtcars$cyl),margin = 2),xlab = "Anzahl an Zylinder",ylab="Absolute Anzahl",col=heat.colors(3),cex.names =2,cex.axis = 2)
par(mar=c(5.1, 4.1, 4.1, 8.1), xpd=TRUE)
barplot(prop.table(table(mtcars$gear,mtcars$cyl),margin = 2),xlab = "Anzahl an Zylinder",ylab="Absolute Anzahl",col=heat.colors(3),cex.names =1.5,cex.axis = 1.5)
legend("topright",inset=c(-0.25,0), legend = names(table(mtcars$gear)),fill=heat.colors(3),title = "Gänge")
par(mar=c(5.1, 4.1, 4.1, 8.1), xpd=TRUE)
barplot(table(mtcars$gear,mtcars$cyl),xlab = "Anzahl an Zylinder",ylab="Absolute Anzahl",col=heat.colors(3),cex.axis = 1.5,cex.names = 1.5)
legend("topright",inset=c(-0.25,0), legend = names(table(mtcars$gear)),fill=heat.colors(3),title = "Gänge")
par(mar=c(5.1, 4.1, 4.1, 8.1), xpd=TRUE)
barplot(prop.table(table(mtcars$gear,mtcars$cyl),margin = 2),xlab = "Anzahl an Zylinder",ylab="Absolute Anzahl",col=heat.colors(3),cex.names =1.5,cex.axis = 1.5)
legend("topright",inset=c(-0.25,0), legend = names(table(mtcars$gear)),fill=heat.colors(3),title = "Gänge")
install.packages(c("jsonlite", "nlme", "survival"))
library("intervisu", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
Scatterplot_Matrix(iris)
library(intervisu)
Scatterplot_Matrix(iris)
library(intervisu)
Scatterplot_Matrix(iris)
library(intervisu)
Scatterplot_Matrix(iris)
library("intervisu", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
Smoothing_Analysis(iris)
Timeseries(iris)
Timeseries(iris,height = c(500, 300))
Timeseries(iris,height = c(400, 200))
Timeseries(iris,height = c(400, 200))
library("BaylorEdPsych", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
detach("package:BaylorEdPsych", unload=TRUE)
library("intervisu", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library(intervisu)
install.packages("~/LRZ Sync+Share/Bachelorarbeit/intervisu.tar.gz", repos = NULL, type = "source")
library("intervisu", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
Smoothing_Analysis(iris)
Stacked_Barplot(mtcars)
aov(iris$Sepal.Length~iris$Species)
plot(iris$Sepal.Length~iris$Species)
describeBy
library("psych", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("BaylorEdPsych", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
describeBy
describeBy(iris, group = iris$Species)
describeBy(iris$Sepal.Length, group = iris$Species)
fit=aov(iris$Sepal.Length~iris$Species)
fit$residuals
ks.test(fit$residuals,"pnorm")
fit=aov(iris$Sepal.Length~iris$Species)
summary(fit)
x=matrix(c(3,-12,0,6,6,-3), nrow = 3, ncol = 2,byrow = T)
x
var(x)
x=matrix(c(1.88,0.42,0.42,0.53), nrow = 2, ncol = 2,byrow = T)
x
solve(x)
-21/41
load("/Users/corneliusfritz/Downloads/atemwege.rda")
data=load("/Users/corneliusfritz/Downloads/atemwege.rda")
atem
data
cov(atem)
mean(atem)
mean(atem,na.rm = T)
cov(atem[,2:3])
c(mean(atem[,2]),mean(atem[,3]))
mittel=c(mean(atem[,2]),mean(atem[,3]))
log(3)
atem[,4]
log(atem[,4])
log(atem[,1:3])
atem=cbind(log(atem[,1:3]),atem[,4])
cov(atem[,2:3])
mittel=c(mean(atem[,2]),mean(atem[,3]))
log(3)
View(atem)
atem=cbind(log(atem[,1:3]),sex=atem[,4])
atem=cbind(log(atem[,1:3]),atem[,4])
cov(atem[,2:3])
load("/Users/corneliusfritz/Downloads/atemwege.rda")
atem=cbind(log(atem[,1:3]),atem[,4])
cov(atem[,2:3])
mittel=c(mean(atem[,2]),mean(atem[,3]))
mu=c(log(3),log(1.4))
1328*t(mittel-mu)solve(cov(atem[,2:3]))(mittel-mu)
1328*t(mittel-mu)*solve(cov(atem[,2:3]))*(mittel-mu)
t(mittel-mu)
solve(cov(atem[,2:3]))
(mittel-mu)
solve(cov(atem[,2:3]))*(mittel-mu)
t(mittel-mu)*solve(cov(atem[,2:3]))
t(mittel-mu)%*% solve(cov(atem[,2:3]))%*% (mittel-mu)
1328*t(mittel-mu)%*% solve(cov(atem[,2:3]))%*% (mittel-mu)
(1328*(1328-2))/(3*(1327))*t(mittel-mu)%*% solve(cov(atem[,2:3]))%*% (mittel-mu)
(1328*(1328-2))/(3*(1327))
t(mittel-mu)%*% solve(cov(atem[,2:3]))%*% (mittel-mu)
0.01807204*442.3331
n <- nrow(atem)
nrow(atem)
n <- nrow(atem)
p <- 2
alpha <- 0.01
x.quer <- c(mean(log.fef50),mean(log.fef75))
log.fef50<-log(fef50)
log.fef75<-log(fef75)
log.fef50<-log(atem$fef50)
log.fef75<-log(atem$fef75)
load("/Users/corneliusfritz/Downloads/atemwege.rda")
log.fef50<-log(atem$fef50)
log.fef75<-log(atem$fef75)
atem=cbind(log(atem[,1:3]),atem[,4])
cov(atem[,2:3])
S      <- var(cbind(log.fef50,log.fef75))
S
c(log(3),log(1.4))
c(log(3),log(1.4))
c(mean(log.fef50),mean(log.fef75))
c(mean(atem[,2]),mean(atem[,3]))
n*(n-p)/(p*(n-1))*(x.quer-mu0)%*%solve(S) %*%(x.quer-mu0)
x.quer <- c(mean(log.fef50),mean(log.fef75))
mu0    <- c(log(3),log(1.4))
S      <- var(cbind(log.fef50,log.fef75))
n*(n-p)/(p*(n-1))*(x.quer-mu0)%*%solve(S) %*%(x.quer-mu0)
S
cov(atem[,2:3])
solve(cov(atem[,2:3]))
solve(S)
(x.quer-mu0)
(mittel-mu)
(1328*(1328-2))/(3*(1327))
n*(n-p)/(p*(n-1))
(1328*(1328-2))
n*(n-p)
(3*(1327))
(p*(n-1))
(1328*(1328-2))/(2*(1327))*t(mittel-mu)%*% solve(cov(atem[,2:3]))%*% (mittel-mu)
qf(0.95,df1 = 2,df2 = 1328-2)
pf((1328*(1328-2))/(2*(1327))*t(mittel-mu)%*% solve(cov(atem[,2:3]))%*% (mittel-mu),df1 = 2,df2 = 1328-2)
1-pf((1328*(1328-2))/(2*(1327))*t(mittel-mu)%*% solve(cov(atem[,2:3]))%*% (mittel-mu),df1 = 2,df2 = 1328-2)
mittel=c(mean(atem$pef-atem$fef50),mean(atem$pef-atem$fef75))
mittel=c(mean(atem$pef-atem$fef50),mean(atem$pef-atem$fef75))
mu=c(0,0)
(1328*(1328-2))/(2*(1327))*t(mittel-mu)%*% solve(cov(atem[,2:3]))%*% (mittel-mu)
qf(0.95,df1 = 2,df2 = 1328-2)
1-pf((1328*(1328-2))/(2*(1327))*t(mittel-mu)%*% solve(cov(atem[,2:3]))%*% (mittel-mu),df1 = 2,df2 = 1328-2)
mittel
cov(cbind(atem$pef-atem$fef50,atem$pef-atem$fef75))
(1328*(1328-2))/(2*(1327))*t(mittel-mu)%*% solve(cov(cbind(atem$pef-atem$fef50,atem$pef-atem$fef75)))%*% (mittel-mu)
qf(0.95,df1 = 2,df2 = 1328-2)
1-pf((1328*(1328-2))/(2*(1327))*t(mittel-mu)%*% solve(cov(atem[,2:3]))%*% (mittel-mu),df1 = 2,df2 = 1328-2)
atem[,5=1]
atem[,5==1]
atem[,5]
atem[,4]
atem[,4==1]
atem[atem[,4]==1,]
names(atem)
x1=c(mean(atem[atem[,4]==1,2]),mean(atem[atem[,4]==1,3]))
x2=c(mean(atem[atem[,4]==2,2]),mean(atem[atem[,4]==2,3]))
(1328-2+1)/((1328-2)*2)
length(atem[atem[,4]==1,2])
length(atem[atem[,4]==1,2])*2
S1=cov(atem[atem[,4]==1,2],atem[atem[,4]==1,3])
S2=cov(atem[atem[,4]==2,2],atem[atem[,4]==2,3])
S=1/(1328-2)(length(atem[atem[,4]==1,2])*S1+length(atem[atem[,4]==2,2])*S2)
length(atem[atem[,4]==1,2])
S1
cov(atem[atem[,4]==1,2],atem[atem[,4]==1,3])
S1=cov(cbind(atem[atem[,4]==1,2],atem[atem[,4]==1,3]))
S2=cov(cbind(atem[atem[,4]==2,2],atem[atem[,4]==2,3]))
S=1/(1328-2)(length(atem[atem[,4]==1,2])*S1+length(atem[atem[,4]==2,2])*S2)
S1
S2
length(atem[atem[,4]==1,2])*S1
length(atem[atem[,4]==2,2])*S2
(length(atem[atem[,4]==1,2])*S1+length(atem[atem[,4]==2,2])*S2)
S=1/(1328-2)*(length(atem[atem[,4]==1,2])*S1+length(atem[atem[,4]==2,2])*S2)
(length(atem[atem[,4]==1,2])%*%atem[atem[,4]==1,1])/(1328)t(x1-x2)*solve(S)%*%(x1-x2)
(length(atem[atem[,4]==1,2])*atem[atem[,4]==1,1])/(1328)t(x1-x2)%*%solve(S)%*%(x1-x2)
(length(atem[atem[,4]==1,2])*atem[atem[,4]==1,1])/(1328)*t(x1-x2)%*%solve(S)%*%(x1-x2)
(length(atem[atem[,4]==1,2])*atem[atem[,4]==1,1])/(1328)
(length(atem[atem[,4]==1,2])
)
(length(atem[atem[,4]==1,2])*length(atem[atem[,4]==1,1]))/(1328)*t(x1-x2)%*%solve(S)%*%(x1-x2)
S
(1328-1)/((1328-2)*2)*(length(atem[atem[,4]==1,2])*length(atem[atem[,4]==1,1]))/(1328)*t(x1-x2)%*%solve(S)%*%(x1-x2)
varmat <- cbind(log.fef50,log.fef75)
x1.quer <- apply(varmat[sex==1,],2,mean)
x2.quer <- apply(varmat[sex==2,],2,mean)
x1.quer <- apply(varmat[atem$sex==1,],2,mean)
x2.quer <- apply(varmat[atem$sex==2,],2,mean)
x1.quer
x1
load("/Users/corneliusfritz/Downloads/atemwege.rda")
x1.quer <- apply(varmat[atem$sex==1,],2,mean)
x2.quer <- apply(varmat[atem$sex==2,],2,mean)
x1.quer
x2.quer
x2
(length(atem[atem[,4]==1,2])*length(atem[atem[,4]==1,1]))/(length(atem[atem[,4]==1,2])+length(atem[atem[,4]==1,1]))*t(x1-x2)%*%solve(S)%*%(x1-x2)
install.packages(c("rpart", "partykit"))
library("partykit", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("rpart", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
airquality
fit1=lm(airquality$Ozone~airquality$Solar.R+airquality$Wind +airquality$Temp)
fit2=lm(airquality$Ozone~airquality$Solar.R*airquality$Wind *airquality$Temp)
summary(fit1)
summary(fit2)
reg.rpart <- rpart(Ozone~Wind+Temp+Solar.R,data=airquality)
## Schoene Visualisierung
reg.rpart <- as.party(reg.rpart)
plot(reg.rpart)
reg.rpart
plot.modelparty
plot.modelparty(reg.rpart)
plot.modelparty(reg.rpart,terminal_panel = 3)
plot.party(reg.rpart)
plot.party
else upViewport()
main = NULL
terminal_panel = node_terminal
tp_args = list()
inner_panel = node_inner
ip_args = list()
edge_panel = edge_simple
ep_args = list()
drop_terminal = FALSE
tnex = 1
newpage = TRUE
pop = TRUE
gp = gpar()
node <- node_party(x)
x=reg.rpart
node <- node_party(x)
nx <- width(node)
ny <- depth(node, root = TRUE)
if (newpage)
grid.newpage()
root_vp <- viewport(layout = grid.layout(3, 3, heights = unit(c(ifelse(is.null(main),
0, 3), 1, 1), c("lines", "null", "lines")), widths = unit(c(1,
1, 1), c("lines", "null", "lines"))), name = "root",
gp = gp)
pushViewport(root_vp)
if (!is.null(main)) {
main_vp <- viewport(layout.pos.col = 2, layout.pos.row = 1,
name = "main")
pushViewport(main_vp)
grid.text(y = unit(1, "lines"), main, just = "center")
upViewport()
}
tree_vp <- viewport(layout.pos.col = 2, layout.pos.row = 2,
xscale = c(0, nx), yscale = c(0, ny + (tnex - 1)), name = "tree")
pushViewport(tree_vp)
if (inherits(terminal_panel, "grapcon_generator"))
terminal_panel <- do.call("terminal_panel", c(list(x),
as.list(tp_args)))
if (inherits(inner_panel, "grapcon_generator"))
inner_panel <- do.call("inner_panel", c(list(x), as.list(ip_args)))
if (inherits(edge_panel, "grapcon_generator"))
edge_panel <- do.call("edge_panel", c(list(x), as.list(ep_args)))
if ((nx <= 1 & ny <= 1)) {
pushViewport(plotViewport(margins = rep(1.5, 4), name = paste("Node",
id_node(node), sep = "")))
terminal_panel(node)
}
else {
.plot_node(node, xlim = c(0, nx), ylim = c(0, ny - 0.5 +
(tnex - 1)), nx = nx, ny = ny, terminal_panel = terminal_panel,
inner_panel = inner_panel, edge_panel = edge_panel,
tnex = tnex, drop_terminal = drop_terminal, debug = FALSE)
}
if (pop) popViewport() else upViewport()
if (inherits(edge_panel, "grapcon_generator"))
edge_panel <- do.call("edge_panel", c(list(x), as.list(ep_args)))
if ((nx <= 1 & ny <= 1)) {
pushViewport(plotViewport(margins = rep(1.5, 4), name = paste("Node",
id_node(node), sep = "")))
terminal_panel(node)
}else {
.plot_node(node, xlim = c(0, nx), ylim = c(0, ny - 0.5 +
(tnex - 1)), nx = nx, ny = ny, terminal_panel = terminal_panel,
inner_panel = inner_panel, edge_panel = edge_panel,
tnex = tnex, drop_terminal = drop_terminal, debug = FALSE)
}
if ((nx <= 1 & ny <= 1)) {
pushViewport(plotViewport(margins = rep(1.5, 4), name = paste("Node",
id_node(node), sep = "")))
terminal_panel(node)
}else {
plot_node(node, xlim = c(0, nx), ylim = c(0, ny - 0.5 +
(tnex - 1)), nx = nx, ny = ny, terminal_panel = terminal_panel,
inner_panel = inner_panel, edge_panel = edge_panel,
tnex = tnex, drop_terminal = drop_terminal, debug = FALSE)
}
upViewport()
if (pop) popViewport() else upViewport()
x, main = NULL, terminal_panel = node_terminal, tp_args = list(),
abs(c(10.3,25.6)-c(4.5,21.5))
x=matrix(c(1,0,2,-4,2,-1),nrow = 3)
x
cov(x)
qchisq(p = 0.95,df = 34)
x=matrix(c(17,683,20.29,20.29,24.407),nrow = 2)
x=matrix(c(17.683,20.29,20.29,24.407),nrow = 2)
solve(x)
x
qf(0.95, df1 = 2,df2 = 33)
x2=matrix(c(18.479,19.095,19.095,19.273),nrow = 2)
x=1/(35+14-2)(35*x1+14*x2)
x1=matrix(c(17.683,20.29,20.29,24.407),nrow = 2)
x2=matrix(c(18.479,19.095,19.095,19.273),nrow = 2)
x=1/(35+14-2)(35*x1+14*x2)
35*x1
x=1/(35+14-2)*(35*x1+14*x2)
x
library(mclust)
install.packages("mclust")
library(mclust)
help(Mclust)
help(mclustModelNames)
set.seed(0)
m1 <- Mclust(data=geyser, G=3, modelNames = rep("EII", 3))
geyser
library("MASS", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
m1 <- Mclust(data=geyser, G=3, modelNames = rep("EII", 3))
summary(m1, parameters=TRUE)                                 ## BIC = -3770.529
geyser
summary(m1, parameters=TRUE)                                 ## BIC = -3770.529
plot(m1, what="classification")        ## Daten mit berechneter Clusterung und Normalverteilungsellipse (Achsenl?nge = Standardabweichung)
plot(m1, what="uncertainty")           ## Unsicherheit: je dicker der Punkt, desto unsicherer ist die Zuteilung der Beobachtung zu einem Cluster
plot(m1, what="density")               ## Konturlinien der Mischverteilung    (vogelwild...)
plot(m1, what="classification")        ## Daten mit berechneter Clusterung und Normalverteilungsellipse (Achsenl?nge = Standardabweichung)
m2 <- Mclust(data=geyser, G=3, modelNames = rep("VVI", 3))
summary(m2, parameters=TRUE)                                 ## BIC = -2813.52
plot(m2, what="classification")
plot(m2, what="uncertainty")
plot(m2, what="density")                                     ## viel besser im Vergleich zu m1
### drittes Modell: nicht-parallele Cluster mit unterschiedlicher Groesse und Form:    (maximale Flexibilit?t)
m3 <- Mclust(data=geyser, G=3, modelNames = rep("VVV", 3))
summary(m3, parameters=TRUE)                                 ## BIC = -3059.029
plot(m3, what="classification")                              ## passt nicht
round(m2$z, 3)
hist(round(m2$z, 3))
m2$classification
round(m2$uncertainty, 3)
table(round(m2$uncertainty, 3))
x=matrix(c(1.88,0.42,0.42,0.53), nrow = 2, ncol = 2,byrow = T)
x=matrix(c(1,2,3,4))
x
x=matrix(c(1,2,3,4),ncol = 2)
x
t(x)%*%x
solve(t(x)%*%x)
setwd("~/Downloads")
read.table("europa.txt")
data=read.table("europa.txt")
data=read.table("europa.txt",header = T)
data
data=read.table("europa.txt",header = T)
data=read.table("europa.txt",header = T)
data=read.table("europa.txt",header = T)
data=read.table("europa.txt",header = T)
data
data=read.table("europa.txt",header = T,fileEncoding = "UTF-8")
data
data=read.table("europa.txt",header = T)
data
data=data[,-1]
data
mean(data)
c(mean(data[,1]),mean(data[,2]),mean(data[,3]),mean(data[,4]))
mittel=c(mean(data[,1]),mean(data[,2]),mean(data[,3]),mean(data[,4]))
cov(data)
var=cov(data)
data=data-mittel/(var)
data
data=read.table("europa.txt",header = T)
data=data[,-1]
data
mittel=c(mean(data[,1]),mean(data[,2]),mean(data[,3]),mean(data[,4]))
var=cov(data)
(data-mittel)
sum((data-mittel)[,1])
(data-mittel)
(data-mittel)[,1]
sum((data-mittel)[,2])
sum((data-mittel)[,3])
mittel=c(mean(data[,1]),mean(data[,2]),mean(data[,3]),mean(data[,4]))
mittel
data=read.table("europa.txt",header = T)
data=data[,-1]
data
mean(data[,1])
mean(data[,2])
mittel=c(mean(data[,1]),mean(data[,2]),mean(data[,3]),mean(data[,4]))
var=cov(data)
data-mittel
scale(data)
data=scale(data)
data
data[,1]
data[,4]
data[,3]
data[,]
data[,5]
data[,]
data=data[,]
data
var=cov(data)
var
data=read.table("europa.txt",header = T)
data=data[,-1]
data
mittel=c(mean(data[,1]),mean(data[,2]),mean(data[,3]),mean(data[,4]))
var=cov(data)
var
data=scale(data)
data=data[,]
data
var=cov(data)
var
eigen(var)
princomp(data,cor = T)
summary(princomp(data,cor = T))
cor(data)
var
eigen(var)
eigen(var[1]
eigen(var)[1]
eigen(var)[1]
eigen(var)$values[1]
eigen(var)$values[1]/(sum(eigen(var)$values))
eigen(var)$values[2]/(sum(eigen(var)$values))
eigen(var)$values[3]/(sum(eigen(var)$values))
eigen(var)$values[4]/(sum(eigen(var)$values))
c(eigen(var)$values[1]/(sum(eigen(var)$values)),
eigen(var)$values[2]/(sum(eigen(var)$values)),
eigen(var)$values[3]/(sum(eigen(var)$values)),
eigen(var)$values[4]/(sum(eigen(var)$values)))
eV=c(eigen(var)$values[1]/(sum(eigen(var)$values)),
eigen(var)$values[2]/(sum(eigen(var)$values)),
eigen(var)$values[3]/(sum(eigen(var)$values)),
eigen(var)$values[4]/(sum(eigen(var)$values)))
sum(eV)
plot(eV)
plot(eV,type = "l")
plot(eV,c(1,2,3,4),type = "l")
plot(c(1,2,3,4),eV,type = "l")
screeplot(x = princomp(data,cor = T))
screeplot(x = princomp(data,cor = T),type = "lines")
princomp(data,cor = T)
summary(princomp(data,cor = T))
summary(princomp(data,cor = T,scores = T))
princomp(data,cor = T,scores = T)
eigen(var)
eigen(var)$vectors
data=read.table("europa.txt",header = T)
data
data=data[,-1]
eigen(var)$vectors
data[22,]
data[22,]%*%eigen(var)$vectors
data[22,]
as.vector(data[22,])
as.vector(data[22,])%*%eigen(var)$vectors
as.numeric(data[22,])
as.numeric(data[22,])%*%eigen(var)$vectors
as.numeric(data[7,])%*%eigen(var)$vectors
