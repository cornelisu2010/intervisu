a slide you can set the angle of the plot, there is also a dynamic dimension to this slider. You can press the little ‘Play‘-Button and it will automatically rotate the plot once.
You can also plot vertical lines for each point in the plot by pressing the button named 'Draw vertical lines'. There is also a conditional mode, which lets you
condition both plots on a fourth variable. To enter this mode press the button called 'Condition plot on a fourth variable'. You pick a value for the fourth variable
and only 30% of the data around that value is plotted.
@export
source('~/Documents/Bachelorarbeit/intervisu/R/helper_functions.R')
#' @export
Scatter_4d = function(data,n,height=c(800,500)) {
library(shiny)
library(scatterplot3d)
data=factor_check(data)
choices = list()
for (i in 1: length(names(data))) {
choices[[i]]=i
}
names(choices)=names(data)
ui <- fluidPage(
tags$div( HTML(
"<h2><center>Dreidimensionaler Scatterplot </center></h2>")
),
sidebarLayout(
sidebarPanel(
fluidRow(
column(6,selectInput("check1", label = h3("1. Variable"),
choices = choices,
selected = 1)),
column(6,selectInput("check2", label = h3("2. Variable"),
choices = choices,
selected = 1))
),
fluidRow(
column(6,selectInput("check3", label = h3("3. Variable"),
choices = choices,
selected = 1)),
column(6,conditionalPanel(
condition = "input.checkbox2 == true",
selectInput("check4", label = h3("4. Variable"),
choices = choices,
selected = 1)
))
),
fluidRow(
column(12,conditionalPanel(
condition = "input.checkbox2 == true",
uiOutput("ui")
))
),
fluidRow(
column(12,sliderInput("slider", label = h3("Angle \n of the plot"), min = 0,
max = 360, value = 100, animate=animationOptions(interval =300)))
),
checkboxInput("checkbox2", label = "Condintion plot on a fourth variable", value = F),
checkboxInput("checkbox", label = "Draw vertikal lines", value = F)
),
mainPanel(
splitLayout(cellWidths =c("70%","30%"),plotOutput("plot1",height = height[1], click = "click1", dblclick = "click2"),
plotOutput("plot2",height = height[2], click = "click3", brush = brushOpts(id = "brush")))
)
)
)
server <- function(input, output) {
output$ui= renderUI({
a=sliderInput("slider2", label = h3("Wert der 4. Variable"), min = floor(min(data[,names(data)[as.numeric(input$check4)]]))+0.3,max = ceiling(max(data[,names(data)[as.numeric(input$check4)]])), value =sum(range(data[,names(data)[as.numeric(input$check4)]]))/2)
a$children[[2]]$attribs$`data-keyboard-step`=1.4
a$children[[2]]$attribs$`data-step`=0.05
a
})
group  <- reactiveValues(
group=rep(T,nrow(data))
)
clicks  <- reactiveValues(
click3=NULL, brush=NULL
)
observeEvent(input$click3, {
clicks$click3=list(x=input$click3$x,y=input$click3$y)
})
observeEvent(input$brush, {
clicks$brush=list(xmin=input$brush$xmin,xmax=input$brush$xmax,ymin=input$brush$ymin,ymax=input$brush$ymax)
})
observeEvent(input$click3, {
if(!is.null(input$brush)) {
if(input$checkbox2) {
data1=data_cut(data, var = data[,names(data)[as.numeric(input$check4)]], value = input$slider2)
group$group <- !((data1[,names(data)[as.numeric(input$check1)]]<=clicks$brush$xmax)&
(data1[,names(data)[as.numeric(input$check1)]]>=clicks$brush$xmin)&
(data1[,names(data)[as.numeric(input$check2)]]>=clicks$brush$ymin)&
(data1[,names(data)[as.numeric(input$check2)]]<=clicks$brush$ymax))
} else {
group$group <- !((data[,names(data)[as.numeric(input$check1)]]<=clicks$brush$xmax)&
(data[,names(data)[as.numeric(input$check1)]]>=clicks$brush$xmin)&
(data[,names(data)[as.numeric(input$check2)]]>=clicks$brush$ymin)&
(data[,names(data)[as.numeric(input$check2)]]<=clicks$brush$ymax))
}
}
})
output$plot1 <- renderPlot(height = height[1],{
if(input$checkbox2) {
if(!is.null(input$slider2)) {
data1=data_cut(data, var = data[,names(data)[as.numeric(input$check4)]], value = input$slider2)
if(input$checkbox) {
a=scatterplot3d(data1[,names(data)[as.numeric(input$check1)]], data1[,names(data)[as.numeric(input$check2)]],data1[,names(data)[as.numeric(input$check3)]], highlight.3d=F, col.axis="black",
type="h", col.grid="grey", main="", pch=19,angle=input$slider,xlab=paste(names(choices)[as.numeric(input$check1)]),ylab=paste(names(choices)[as.numeric(input$check2)]),
zlab=paste(names(choices)[as.numeric(input$check3)]), xlim=c(min(data[,names(data)[as.numeric(input$check1)]]), max(data[,names(data)[as.numeric(input$check1)]])),
ylim=c(min(data[,names(data)[as.numeric(input$check2)]]), max(data[,names(data)[as.numeric(input$check2)]])),
zlim=c(min(data[,names(data)[as.numeric(input$check3)]]), max(data[,names(data)[as.numeric(input$check3)]])))
data2=data1[!group$group,]
a$points3d(data2[,names(data)[as.numeric(input$check1)]], data2[,names(data)[as.numeric(input$check2)]],data2[,names(data)[as.numeric(input$check3)]], pch=19,col="red")
} else {
a=scatterplot3d(data1[,names(data)[as.numeric(input$check1)]], data1[,names(data)[as.numeric(input$check2)]],data1[,names(data)[as.numeric(input$check3)]], highlight.3d=F, col.axis="black",
col.grid="grey", main="", pch=19,angle=input$slider,xlab=paste(names(choices)[as.numeric(input$check1)]),ylab=paste(names(choices)[as.numeric(input$check2)]),
zlab=paste(names(choices)[as.numeric(input$check3)]),xlim=c(min(data[,names(data)[as.numeric(input$check1)]]), max(data[,names(data)[as.numeric(input$check1)]])),
ylim=c(min(data[,names(data)[as.numeric(input$check2)]]), max(data[,names(data)[as.numeric(input$check2)]])),
zlim=c(min(data[,names(data)[as.numeric(input$check3)]]), max(data[,names(data)[as.numeric(input$check3)]])))
data2=data1[!group$group,]
a$points3d(data2[,names(data)[as.numeric(input$check1)]], data2[,names(data)[as.numeric(input$check2)]],data2[,names(data)[as.numeric(input$check3)]], pch=19,col="red")
}
} else {
plot(c(1,2))
}
} else {
if(!is.null(input$slider2)) {
if(input$checkbox) {
a=scatterplot3d(x=data[,names(data)[as.numeric(input$check1)]], y=data[,names(data)[as.numeric(input$check2)]],z=data[,names(data)[as.numeric(input$check3)]], highlight.3d=F, col.axis="black",
type="h", col.grid="grey", main="", pch=19,angle=input$slider,xlab=paste(names(choices)[as.numeric(input$check1)]),ylab=paste(names(choices)[as.numeric(input$check2)]),
zlab=paste(names(choices)[as.numeric(input$check3)]), xlim=c(min(data[,names(data)[as.numeric(input$check1)]]), max(data[,names(data)[as.numeric(input$check1)]])),
ylim=c(min(data[,names(data)[as.numeric(input$check2)]]), max(data[,names(data)[as.numeric(input$check2)]])),
zlim=c(min(data[,names(data)[as.numeric(input$check3)]]), max(data[,names(data)[as.numeric(input$check3)]])))
data2=data[!group$group,]
a$points3d(data2[,names(data)[as.numeric(input$check1)]], data2[,names(data)[as.numeric(input$check2)]],data2[,names(data)[as.numeric(input$check3)]], pch=19,col="red")
} else {
a=scatterplot3d(x=data[,names(data)[as.numeric(input$check1)]], y=data[,names(data)[as.numeric(input$check2)]],z=data[,names(data)[as.numeric(input$check3)]], highlight.3d=F, col.axis="black",
col.grid="grey", main="", pch=19,angle=input$slider,xlab=paste(names(choices)[as.numeric(input$check1)]),ylab=paste(names(choices)[as.numeric(input$check2)]),
zlab=paste(names(choices)[as.numeric(input$check3)]),xlim=c(min(data[,names(data)[as.numeric(input$check1)]]), max(data[,names(data)[as.numeric(input$check1)]])),
ylim=c(min(data[,names(data)[as.numeric(input$check2)]]), max(data[,names(data)[as.numeric(input$check2)]])),
zlim=c(min(data[,names(data)[as.numeric(input$check3)]]), max(data[,names(data)[as.numeric(input$check3)]])))
data2=data[!group$group,]
a$points3d(data2[,names(data)[as.numeric(input$check1)]], data2[,names(data)[as.numeric(input$check2)]],data2[,names(data)[as.numeric(input$check3)]], pch=19,col="red")
}
} else {
plot(c(1,2))
}
}
})
output$plot2= renderPlot(height = height[2],{
if(input$checkbox2) {
data1=data_cut(data, var = data[,names(data)[as.numeric(input$check4)]], value = input$slider2)
plot(data1[,names(data)[as.numeric(input$check1)]], data1[,names(data)[as.numeric(input$check2)]],
pch=19,xlab=paste(names(data)[as.numeric(input$check1)]),
ylab=paste(names(data)[as.numeric(input$check2)]))
data2=data1[!group$group,]
points(data2[,names(data)[as.numeric(input$check1)]], data2[,names(data)[as.numeric(input$check2)]],
pch=19,col="red")
} else {
plot(data[,names(data)[as.numeric(input$check1)]], data[,names(data)[as.numeric(input$check2)]],
pch=19,xlab=paste(names(data)[as.numeric(input$check1)]),
ylab=paste(names(data)[as.numeric(input$check2)]))
data2=data[!group$group,]
points(data2[,names(data)[as.numeric(input$check1)]], data2[,names(data)[as.numeric(input$check2)]],
pch=19,col="red")
}
})
}
shinyApp(ui = ui, server = server)
}
factor_check=function(data){
log_fac=c()
for(i in 1:ncol(data)){
if(is.factor(data[,i])) {log_fac[i]=F}
else{log_fac[i]=T}
}
return(data[,log_fac])
}
data_cut= function(data, var,value, prob=0.15) {
b=value
d=c()
for(i in seq(0,1,by=0.001)){
c=quantile(var,probs = i)
if(abs(b-c)<0.1) {
d=i
}
}
if(length(d)==0) {
return(data)
}
if(d+prob>=1){
a=c(quantile(var,probs =d-prob),max(var))
} else if(d-prob<=0){
a=c(min(var),quantile(var,probs =d+prob))
} else {
a=quantile(var,probs = c(d-prob,d+prob))
}
data=data[(var<a[2])&(var>a[1]),]
return(data)
}
Scatter_4d(iris)
data=mtcars
input=list()
input$check1=list("1")
input$check2=list("2")
height=c(500,300)
prop=list(prop=c(),abs=c())
click=list(click1=list(x=2),click2=list(x=1))
col=list(col=c())
factor=list()
factor$factor=NULL
input$check2="1"
input$check1="3"
input$click1=list(x=2)
input$click2=list(x=1)
input$select="2"
count=list(count=1)
n=10
data=factor_check(data)
choices = list()
for (i in 1: length(names(data))) {
choices[[i]]=i
}
names(choices)=names(data)
input$check1
clicks$brush$xmax
clicks=list(brush=list(xmin=1,xmax=3,ymin=1,ymax=10))
data[,names(data)[as.numeric(input$check4)]]
input$check4
input$check4="1"
input$slider2
input$slider2=1
data[,names(data)[as.numeric(input$check4)]]
input$slider2=22
data_cut(data, var = data[,names(data)[as.numeric(input$check4)]], value = input$slider2)
!((data1[,names(data)[as.numeric(input$check1)]]<=clicks$brush$xmax)&
(data1[,names(data)[as.numeric(input$check1)]]>=clicks$brush$xmin)&
(data1[,names(data)[as.numeric(input$check2)]]>=clicks$brush$ymin)&
(data1[,names(data)[as.numeric(input$check2)]]<=clicks$brush$ymax))
data1=data_cut(data, var = data[,names(data)[as.numeric(input$check4)]], value = input$slider2)
!((data1[,names(data)[as.numeric(input$check1)]]<=clicks$brush$xmax)&
(data1[,names(data)[as.numeric(input$check1)]]>=clicks$brush$xmin)&
(data1[,names(data)[as.numeric(input$check2)]]>=clicks$brush$ymin)&
(data1[,names(data)[as.numeric(input$check2)]]<=clicks$brush$ymax))
input$checkbox2
data_cut(data, var = data[,names(data)[as.numeric(input$check4)]], value = input$slider2)
!((data1[,names(data)[as.numeric(input$check1)]]<=clicks$brush$xmax)&
(data1[,names(data)[as.numeric(input$check1)]]>=clicks$brush$xmin)&
(data1[,names(data)[as.numeric(input$check2)]]>=clicks$brush$ymin)&
(data1[,names(data)[as.numeric(input$check2)]]<=clicks$brush$ymax))
input$slider2=20
!((data1[,names(data)[as.numeric(input$check1)]]<=clicks$brush$xmax)&
(data1[,names(data)[as.numeric(input$check1)]]>=clicks$brush$xmin)&
(data1[,names(data)[as.numeric(input$check2)]]>=clicks$brush$ymin)&
(data1[,names(data)[as.numeric(input$check2)]]<=clicks$brush$ymax))
data1=data_cut(data, var = data[,names(data)[as.numeric(input$check4)]], value = input$slider2)
!((data1[,names(data)[as.numeric(input$check1)]]<=clicks$brush$xmax)&
(data1[,names(data)[as.numeric(input$check1)]]>=clicks$brush$xmin)&
(data1[,names(data)[as.numeric(input$check2)]]>=clicks$brush$ymin)&
(data1[,names(data)[as.numeric(input$check2)]]<=clicks$brush$ymax))
input$slider2=30
data_cut(data, var = data[,names(data)[as.numeric(input$check4)]], value = input$slider2)
data1=data_cut(data, var = data[,names(data)[as.numeric(input$check4)]], value = input$slider2)
!((data1[,names(data)[as.numeric(input$check1)]]<=clicks$brush$xmax)&
(data1[,names(data)[as.numeric(input$check1)]]>=clicks$brush$xmin)&
(data1[,names(data)[as.numeric(input$check2)]]>=clicks$brush$ymin)&
(data1[,names(data)[as.numeric(input$check2)]]<=clicks$brush$ymax))
clicks$brush
data1[,names(data)[as.numeric(input$check1)]]
data1[,names(data)[as.numeric(input$check1)]]<=clicks$brush$xmax
data1[,names(data)[as.numeric(input$check1)]]>=clicks$brush$xmin
data1[,names(data)[as.numeric(input$check2)]]>=clicks$brush$ymin
data1[,names(data)[as.numeric(input$check2)]]<=clicks$brush$ymax
!((data1[,names(data)[as.numeric(input$check1)]]<=clicks$brush$xmax)&
(data1[,names(data)[as.numeric(input$check1)]]>=clicks$brush$xmin)&
(data1[,names(data)[as.numeric(input$check2)]]>=clicks$brush$ymin)&
(data1[,names(data)[as.numeric(input$check2)]]<=clicks$brush$ymax))
data1
data1[,names(data)[as.numeric(input$check1)]]
data1[,names(data)[as.numeric(input$check2)]]
clicks=list(brush=list(xmin=80,xmax=150,ymin=25,ymax=30))
data1=data_cut(data, var = data[,names(data)[as.numeric(input$check4)]], value = input$slider2)
!((data1[,names(data)[as.numeric(input$check1)]]<=clicks$brush$xmax)&
(data1[,names(data)[as.numeric(input$check1)]]>=clicks$brush$xmin)&
(data1[,names(data)[as.numeric(input$check2)]]>=clicks$brush$ymin)&
(data1[,names(data)[as.numeric(input$check2)]]<=clicks$brush$ymax))
scatterplot3d(data1[,names(data)[as.numeric(input$check1)]], data1[,names(data)[as.numeric(input$check2)]],data1[,names(data)[as.numeric(input$check3)]], highlight.3d=F, col.axis="black",
type="h", col.grid="grey", main="", pch=19,angle=input$slider,xlab=paste(names(choices)[as.numeric(input$check1)]),ylab=paste(names(choices)[as.numeric(input$check2)]),
zlab=paste(names(choices)[as.numeric(input$check3)]), xlim=c(min(data[,names(data)[as.numeric(input$check1)]]), max(data[,names(data)[as.numeric(input$check1)]])),
ylim=c(min(data[,names(data)[as.numeric(input$check2)]]), max(data[,names(data)[as.numeric(input$check2)]])),
zlim=c(min(data[,names(data)[as.numeric(input$check3)]]), max(data[,names(data)[as.numeric(input$check3)]])))
plot(data1[,names(data)[as.numeric(input$check1)]], data1[,names(data)[as.numeric(input$check2)]],
pch=19,xlab=paste(names(data)[as.numeric(input$check1)]),
ylab=paste(names(data)[as.numeric(input$check2)]))
data2=data1[!group$group,]
points(data2[,names(data)[as.numeric(input$check1)]], data2[,names(data)[as.numeric(input$check2)]],
pch=19,col="red")
plot(data1[,names(data)[as.numeric(input$check1)]], data1[,names(data)[as.numeric(input$check2)]],
pch=19,xlab=paste(names(data)[as.numeric(input$check1)]),
ylab=paste(names(data)[as.numeric(input$check2)]))
group$group
group=list()
group$group <- !((data1[,names(data)[as.numeric(input$check1)]]<=clicks$brush$xmax)&
(data1[,names(data)[as.numeric(input$check1)]]>=clicks$brush$xmin)&
(data1[,names(data)[as.numeric(input$check2)]]>=clicks$brush$ymin)&
(data1[,names(data)[as.numeric(input$check2)]]<=clicks$brush$ymax))
data2=data1[!group$group,]
points(data2[,names(data)[as.numeric(input$check1)]], data2[,names(data)[as.numeric(input$check2)]],
pch=19,col="red")
source('~/Documents/Bachelorarbeit/Funktionen /Metrische Variablen /Mehrere Variablen/4-dim-scatter.R')
Scatter_4d(iris)
data
a=sliderInput("slider2", label = h3("Wert der 4. Variable"), min = floor(min(data[,names(data)[as.numeric(input$check4)]]))+0.3,max = ceiling(max(data[,names(data)[as.numeric(input$check4)]])), value =sum(range(data[,names(data)[as.numeric(input$check4)]]))/2)
a$children[[2]]$attribs$`data-keyboard-step`=1.4
a$children[[2]]$attribs$`data-step`=0.05
a
data_cut(data, var = data[,names(data)[as.numeric(input$check4)]], value = input$slider2)
a=sliderInput("slider2", label = h3("Wert der 4. Variable"), min = floor(min(data[,names(data)[as.numeric(input$check4)]]))+0.3,max = ceiling(max(data[,names(data)[as.numeric(input$check4)]])), value =sum(range(data[,names(data)[as.numeric(input$check4)]]))/2)
a$children[[2]]$attribs$`data-keyboard-step`=1.4
a$children[[2]]$attribs$`data-step`=0.05
a
data$data1=data_cut(data, var = data[,names(data)[as.numeric(input$check4)]], value = input$slider2)
data_cut(data, var = data[,names(data)[as.numeric(input$check4)]], value = input$slider2)
source('~/Documents/Bachelorarbeit/Funktionen /Metrische Variablen /Mehrere Variablen/4-dim-scatter.R')
Scatter_4d(iris)
fluidPage(
tags$div( HTML(
"<h2><center>Dreidimensionaler Scatterplot </center></h2>")
),
sidebarLayout(
sidebarPanel(
fluidRow(
column(6,selectInput("check1", label = h3("1. Variable"),
choices = choices,
selected = 1)),
column(6,selectInput("check2", label = h3("2. Variable"),
choices = choices,
selected = 1))
),
fluidRow(
column(6,selectInput("check3", label = h3("3. Variable"),
choices = choices,
selected = 1)),
column(6,conditionalPanel(
condition = "input.checkbox2 == true",
selectInput("check4", label = h3("4. Variable"),
choices = choices,
selected = 1)
))
),
fluidRow(
column(12,conditionalPanel(
condition = "input.checkbox2 == true",
uiOutput("ui")
))
),
fluidRow(
column(12,sliderInput("slider", label = h3("Angle \n of the plot"), min = 0,
max = 360, value = 100, animate=animationOptions(interval =300)))
),
checkboxInput("checkbox2", label = "Condintion plot on a fourth variable", value = F),
checkboxInput("checkbox", label = "Draw vertikal lines", value = F)
),
mainPanel(
splitLayout(cellWidths =c("70%","30%"),plotOutput("plot1",height = height[1], click = "click1", dblclick = "click2"),
plotOutput("plot2",height = height[2], click = "click3", brush = brushOpts(id = "brush")))
)
)
)
data_cut(data, var = data[,names(data)[as.numeric(input$check4)]], value = input$slider2)
Scatter_4d(iris)
data=mtcars
input=list()
input$check1=list("1")
input$check2=list("2")
height=c(500,300)
prop=list(prop=c(),abs=c())
click=list(click1=list(x=2),click2=list(x=1))
col=list(col=c())
factor=list()
factor$factor=NULL
input$check2="1"
input$check1="3"
input$click1=list(x=2)
input$click2=list(x=1)
input$select="2"
count=list(count=1)
clicks=list(brush=list(xmin=80,xmax=150,ymin=25,ymax=30))
input$check4="1"
data_cut(data, var = data[,names(data)[as.numeric(input$check4)]], value = input$slider2)
data_cut= function(data, var,value, prob=0.15) {
b=value
d=c()
for(i in seq(0,1,by=0.001)){
c=quantile(var,probs = i)
if(abs(b-c)<0.1) {
d=i
}
}
if(length(d)==0) {
return(data)
}
if(d+prob>=1){
a=c(quantile(var,probs =d-prob),max(var))
} else if(d-prob<=0){
a=c(min(var),quantile(var,probs =d+prob))
} else {
a=quantile(var,probs = c(d-prob,d+prob))
}
data=data[(var<a[2])&(var>a[1]),]
return(data)
}
data_cut(data, var = data[,names(data)[as.numeric(input$check4)]], value = input$slider2)
data
input$check4
data[,names(data)[as.numeric(input$check4)]]
input$slider2
input$slider2=2
data_cut(data, var = data[,names(data)[as.numeric(input$check4)]], value = input$slider2)
source('~/Documents/Bachelorarbeit/Funktionen /Metrische Variablen /Mehrere Variablen/4-dim-scatter.R')
Scatter_4d(iris)
data1$slider
source('~/Documents/Bachelorarbeit/Funktionen /Metrische Variablen /Mehrere Variablen/4-dim-scatter.R')
Scatter_4d(iris)
data_cut(data, var = data[,names(data)[as.numeric(input$check4)]], value = data1$slider)
source('~/Documents/Bachelorarbeit/Funktionen /Metrische Variablen /Mehrere Variablen/4-dim-scatter.R')
Scatter_4d(iris)
Scatter_4d(iris)
input$slider2
data1$slider=input$slider2
source('~/Documents/Bachelorarbeit/Funktionen /Metrische Variablen /Mehrere Variablen/4-dim-scatter.R')
Scatter_4d(iris)
library("mgcv", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("splines", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("shiny", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
transform_opt=list()
fluidRow(
column(6,selectInput(inputId = "transform_x", label = "Transformation X", selected = "id" ,choices = transform_opts)),
column(6,selectInput(inputId = "transform_y", label = "Transformation Y", selected = "id" ,choices = transform_opts)),
)
transform_opts=list()
fluidRow(
column(6,selectInput(inputId = "transform_x", label = "Transformation X", selected = "id" ,choices = transform_opts)),
column(6,selectInput(inputId = "transform_y", label = "Transformation Y", selected = "id" ,choices = transform_opts)),
)
