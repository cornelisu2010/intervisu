{
    "collab_server" : "",
    "contents" : "#' Interactive stacked Barplot\n#'\n#' Takes any data and creates an interactive stacked Barplot with multiple features.\n#'\n#' @param data A data.frame object that is to be analyzed\n#' @param n A numeric value indicating from what number of different values a variable is seen as categorical, all variables that have more different values than n are being treated as metric values\n#' @param height A two-dimensional numeric value indicating the height of the barplot and boxplot\n#' @param m A numeric value telling hiow many observations need to be in each cell to perform the approximative chi^2-Test, rather than the exact Fisher-Test(default at 5)\n#' @author Cornelius Fritz <cornelius.fritz@campus.lmu.de>\n#' @example demo/demo2.R\n#' @details In the sidebar you can choose two categorical variables and plot a stacked Barplot, one bar for every level of the second categorical variable.\n#' If you click on one of the shown barplots, a boxplot conditioned onto that specifical level of categorical data will be shown underneath the barplot. You can also decide which\n#' metric variable should be plotted in the boxplot. With the frequency table of the two categorical variables ether a approximate chi^2 or exact fisher-test is computed.\n#' The test can be interpreted as to weather the hypothesis of homogeneity holds true or not. In case of a 2x2 frequency table the Odds Ratio value is given as well. What\n#' test is used depends on the observations in each cell, typically the count should be higher than 5 in each cell to perform the approximate test, but one can set\n#' this number when one is calling the function. If one cell in the frequency table has less observations than needed for the approximate test the fisher-test is performed.\n#' You can also change the grouping of factor levels of the second factorial variable.\n#' One click highlights a plot (the boxplot conditioned on that specific level will be shown as well) and once you double clicked on another bar, these two factorial levels will be melted into one.\n#' You can also look at the boxplot conditioned onto the new factor levels and if you want to go back to the original factor levels just press the 'back' button.\n#' @export\n#'\n\n\n\nStacked_Barplot = function(data, n=10,m=5,height=c(500,300)) {\n\n  data=faktor2(data,n)[[1]]\n  vec=faktor2(data,n)[[2]]\n  if(sum(vec)<=1) {\n    stop(\"Error: In order to use this function there are at lease two factorial variables needed\")\n  }\n  choices = list()\n  for (i in 1: length(names(data)[vec])) {\n    choices[[i]]=i\n  }\n  names(choices)=names(data)[vec]\n\n  choices1 = list()\n  for (i in 1: length(names(data)[!vec])) {\n    choices1[[i]]=i\n  }\n  names(choices1)=names(data)[!vec]\n\n  ui <- fluidPage(\n    tags$div( HTML(\n      \"<h2><center>Stacked Barplots</center></h2>\")\n    ),\n\n    sidebarLayout(\n      sidebarPanel(\n        selectInput(\"check2\", label = h3(\"1. Categorical Variable\"),\n                    choices = choices,\n                    selected = 1),\n        selectInput(\"check1\", label = h3(\"2. Categorical Variable\"),\n                    choices = choices,\n                    selected = 2),\n        selectInput(\"select\", label = h3(\"Metric Variable\"),\n                    choices = choices1,\n                    selected = 1),\n        actionButton(\"back\", label = \"Backwards\")\n      ),\n      mainPanel(\n        fluidRow(\n          column(12,splitLayout(cellWidths = c(\"70%\", \"30%\"),plotOutput(\"Plot1\",height = height[1],click = \"click1\", dblclick = \"click2\"),plotOutput(\"Plot2\", height = height[1])))\n        ),\n        fluidRow(\n          column(7.6,splitLayout(cellWidths = c(\"65%\", \"35%\"),plotOutput(\"Plot3\",height = height[2]),htmlOutput(\"test\")))\n        )\n\n      )\n    )\n  )\n\n\n\n  server <- function(input, output) {\n\n    prop  <- reactiveValues(\n      prop=prop.table(table(data[,names(choices)[as.numeric(1)]],data[,names(choices)[as.numeric(2)]]),margin = 2),\n      abs=table(table(data[,names(choices)[as.numeric(1)]],data[,names(choices)[as.numeric(2)]]))\n\n    )\n\n    click  <- reactiveValues(\n      click1=NULL, click2=NULL\n    )\n    factor <- reactiveValues(\n      factor=list()\n    )\n\n    count <- reactiveValues(\n      count=1\n    )\n\n    col <- reactiveValues(\n      col=NA\n    )\n\n\n    observeEvent(input$click1, {\n      click$click1=input$click1\n      if(length(factor$factor)<=1) {\n        factor$factor[[count$count]]=data[,names(choices)[as.numeric(input$check2)]]\n      }\n      col$col=c(heat.colors(length(rownames(prop$prop))),heat.colors(length(rownames(prop$prop)),alpha = 0.7))\n    })\n\n    observeEvent(input$back, {\n      if(count$count >1) {\n        count$count=count$count-1\n        prop$prop=table(data[,names(choices)[as.numeric(input$check1)]],factor$factor[[count$count]])\n        prop$abs=prop$prop\n        prop$prop=prop.table(prop$prop,margin = 2)\n      }\n    })\n\n\n    observeEvent(input$click2, {\n      click$click2=input$click2\n      if(!is.na(click$click1$x)) {\n        factor$factor[[count$count+1]]=factor_melt(factor_leveln1=position3(x=click$click1$x),\n                                                   factor_leveln2 =position3(x=click$click2$x),\n                                                   factor1 = factor$factor[[count$count]])\n        prop$prop=table(data[,names(choices)[as.numeric(input$check1)]],factor$factor[[count$count+1]])\n        prop$abs=prop$prop\n        prop$prop=prop.table(prop$prop,margin = 2)\n        count$count=count$count+1\n        col$col=heat.colors(length(rownames(prop$prop)))\n\n      }\n\n\n    })\n\n    observeEvent(input$check1, {\n      if(length(factor$factor)<1) {\n        prop$prop=table(data[,names(choices)[as.numeric(input$check1)]],data[,names(choices)[as.numeric(input$check2)]])\n        prop$abs=prop$prop\n        prop$prop=prop.table(prop$prop,margin = 2)\n        col$col=heat.colors(length(rownames(prop$prop)))\n\n      } else {\n        prop$prop=table(data[,names(choices)[as.numeric(input$check1)]],factor$factor[[count$count]])\n        prop$abs=prop$prop\n        prop$prop=prop.table(prop$prop,margin = 2)\n        col$col=heat.colors(length(rownames(prop$prop)))\n\n      }\n\n    })\n    observeEvent(input$check2, {\n      factor$factor=list()\n      col$col=heat.colors(length(rownames(prop$prop)))\n      prop$prop=table(data[,names(choices)[as.numeric(input$check1)]],data[,names(choices)[as.numeric(input$check2)]])\n      prop$abs=prop$prop\n      prop$prop=prop.table(prop$prop,margin = 2)\n\n    })\n\n    output$Plot1 <- renderPlot(height = height[1],{\n      if(is.null(click$click1)){\n        barplot(prop$prop, ylim=c(0,1),col=heat.colors(length(rownames(prop$prop))),xlab=names(choices)[as.numeric(input$check2)])\n      } else {\n        if(position3(click$click1$x)> ncol(prop$prop)){\n          prop1=table_transform(table = prop$prop, click = position3(click$click1$x)-1)\n        } else {\n          prop1=table_transform(table = prop$prop, click = position3(click$click1$x))\n        }\n        barplot(prop1, ylim=c(0,1),col=col$col,xlab=names(choices)[as.numeric(input$check2)])\n      }\n    })\n    output$Plot2 <- renderPlot(height = height[1],{\n      plot.new()\n      legend(x=0,y=0.8, fill=heat.colors(length(rownames(prop$prop))), legend=rownames(prop$prop),title=names(choices)[as.numeric(input$check1)],cex=1.5)\n    })\n    output$Plot3 <- renderPlot(height = height[2],{\n      if(!is.null(click$click1)){\n        data=faktor2(data,n)[[1]]\n        if(length(factor$factor)==0) {\n          plot(data[,names(choices)[as.numeric(input$check1)]],\n               data[,names(choices1)[as.numeric(input$select)]], col=heat.colors(length(rownames(prop$prop))),\n               xlab=paste(names(choices)[as.numeric(input$check1)]),\n               ylab=paste(names(choices1)[as.numeric(input$select)]),\n               main=paste(names(choices)[as.numeric(input$check2)]))\n        } else if(length(levels(factor$factor[[count$count]]))<position3(click$click1$x)) {\n          data3=data\n          data3[,names(choices)[as.numeric(input$check2)]]=factor$factor[[count$count]]\n          data1=data3[(as.character(data3[,names(choices)[as.numeric(input$check2)]]))==(levels(factor$factor[[count$count]])[position3(click$click1$x)-1]),]\n          plot(data1[,names(choices)[as.numeric(input$check1)]],\n               data1[,names(choices1)[as.numeric(input$select)]], col=heat.colors(length(rownames(prop$prop))),\n               xlab=paste(names(choices)[as.numeric(input$check1)]),\n               ylab=paste(names(choices1)[as.numeric(input$select)]),\n               main=paste(names(choices)[as.numeric(input$check2)],\"=\",levels(factor$factor[[count$count]])[position3(click$click1$x)-1]))\n        } else if(is.null(levels(factor$factor[[count$count]])[position3(click$click1$x)-1])) {\n          data1=data\n          plot(data1[,names(choices)[as.numeric(input$check1)]],\n               data1[,names(choices1)[as.numeric(input$select)]], col=heat.colors(length(rownames(prop$prop))),\n               xlab=paste(names(choices)[as.numeric(input$check1)]),\n               ylab=paste(names(choices1)[as.numeric(input$select)]))\n        } else if(length(levels(factor$factor[[count$count]]))==1){\n          plot(data[,names(choices)[as.numeric(input$check1)]],\n               data[,names(choices1)[as.numeric(input$select)]], col=heat.colors(length(rownames(prop$prop))),\n               xlab=paste(names(choices)[as.numeric(input$check1)]),\n               ylab=paste(names(choices1)[as.numeric(input$select)]),\n               main=paste(names(choices)[as.numeric(input$check2)],\"=\",levels(factor$factor[[count$count]])))\n        } else {\n          data3=data\n          data3[,names(choices)[as.numeric(input$check2)]]=factor$factor[[count$count]]\n          data1=data3[(as.character(data3[,names(choices)[as.numeric(input$check2)]]))==(levels(factor$factor[[count$count]])[position3(click$click1$x)]),]\n          plot(data1[,names(choices)[as.numeric(input$check1)]],\n               data1[,names(choices1)[as.numeric(input$select)]], col=heat.colors(length(rownames(prop$prop))),\n               xlab=paste(names(choices)[as.numeric(input$check1)]),\n               ylab=paste(names(choices1)[as.numeric(input$select)]),\n               main=paste(names(choices)[as.numeric(input$check2)],\"=\",levels(factor$factor[[count$count]])[position3(click$click1$x)]))\n\n        }\n\n      }\n    })\n\n    output$test = renderUI({\n      if((ncol(prop$abs)>1)&(nrow(prop$abs)>1)) {\n        if(is.element(T,as.logical(prop$abs<5))) {\n          warning(\"Some cells include less than \", m, \" observations. Because of that an exact Fisher's test is computed.\")\n          test=fisher.test(prop$abs)\n          if((ncol(prop$abs)==2)&(nrow(prop$abs)==2)){\n            Ergebnis=paste0(\"<p><b>Fisher's Exact Test for Count Data </b></p><br> p-palue= \",round(test$p.value,digits = 8),\" <br> alternative hypothesis: true odds ratio <br> is not equal to 1 <br> 95 percent confidence interval:\",\n                            \"[\",round(test$conf.int[1],digits = 3),\", \",round(test$conf.int[2],digits = 3),\"] <br> OR=\", round(test$estimate,digits = 8))\n          } else {\n            Ergebnis=paste0(\"<p><b>Fisher's Exact Test for Count Data </b></p><br> p-palue= \",round(test$p.value,digits = 8),\" <br> alternative hypothesis: two.sided\")\n          }\n        } else {\n          test=chisq.test(prop$abs)\n          test$p.value\n          if((ncol(prop$abs)==2)&(nrow(prop$abs)==2)){\n            Ergebnis=paste0(\"<p><b>Pearson's Chi-squared test <br> with Yates' continuity correction </b></p><br> X-squared = \",round(test$statistic,digits = 8),\n                            \",df=\",round(test$parameter,digits = 1),\"<br>p-value= \",round(test$p.value,digits = 8),\",OR=\", round(getOddsRatio(prop$abs),digits = 5))\n          } else {\n            Ergebnis=paste0(\"<p><b>Pearson's Chi-squared test </b></p><br> X-squared = \",round(test$statistic,digits = 8),\n                            \",df=\",round(test$parameter,digits = 1),\"<br>p-value= \",round(test$p.value,digits = 8),\",OR=\", round(getOddsRatio(prop$abs),digits = 5))\n          }\n        }\n        HTML(Ergebnis)\n      }\n    })\n  }\n  shinyApp(ui = ui, server = server)\n}\n",
    "created" : 1467823129431.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2812408960",
    "id" : "B5F3C6E4",
    "lastKnownWriteTime" : 1467823197,
    "last_content_update" : 1467823197351,
    "path" : "~/LRZ Sync+Share/Bachelorarbeit/intervisu/R/Stacked_Barplot.R",
    "project_path" : "R/Stacked_Barplot.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}